version: "3.8"

services:
  user-db:
    image: postgres:15-alpine
    container_name: user-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: userdb
    volumes:
      - user-db-data:/var/lib/postgresql/data

  notification-db:
    image: postgres:15-alpine
    container_name: notification-db
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: notificationdb
    volumes:
      - notification-db-data:/var/lib/postgresql/data
  
  product-db:
    image: postgres:15-alpine
    container_name: product-db
    restart: always
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: productdb
    volumes:
      - product-db-data:/var/lib/postgresql/data

  order-db:
    image: postgres:15-alpine
    container_name: order-db
    restart: always
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: orderdb
    volumes:
      - order-db-data:/var/lib/postgresql/data

  kafka:
    image: bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9093"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"

  user-service:
    build:
      context: .
      dockerfile: cmd/user-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      user-db:
        condition: service_started
    environment:
      - PORT=8081
      - DB_HOST=user-db
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=userdb
      - KAFKA_BROKERS=kafka:9093

  notification-service:
    build:
      context: .
      dockerfile: cmd/notification-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      notification-db:
        condition: service_started
    environment:
      - PORT=8082
      - DB_HOST=notification-db
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=notificationdb
      - KAFKA_BROKERS=kafka:9093
      - USER_SERVICE_URL=http://user-service:8081

  product-service:
    build:
      context: .
      dockerfile: cmd/product-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      product-db:
        condition: service_started
    environment:
      - PORT=8083
      - DB_HOST=product-db
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=productdb
      - KAFKA_BROKERS=kafka:9093

  order-service:
    build:
      context: .
      dockerfile: cmd/order-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      order-db:
        condition: service_started
    environment:
      - PORT=8084
      - DB_HOST=order-db
      - DB_PORT=5432
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=orderdb
      - KAFKA_BROKERS=kafka:9093
      - PRODUCT_SERVICE_URL=http://product-service:8083

  gateway-service:
    build:
      context: .
      dockerfile: cmd/gateway-service/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      user-service:
        condition: service_started
      notification-service:
        condition: service_started
      product-service:
        condition: service_started
      order-service:
        condition: service_started
    environment:
      - PORT=8080
      - USER_SERVICE_URL=http://user-service:8081
      - NOTIFICATION_SERVICE_URL=http://notification-service:8082
      - PRODUCT_SERVICE_URL=http://product-service:8083
      - ORDER_SERVICE_URL=http://order-service:8084
      - REDIS_URL=redis:6379
      - KAFKA_BROKERS=kafka:9093
      - JWT_SECRET_KEY=secret
      - ADMIN_SECRET_KEY=admin

volumes:
  user-db-data:
  notification-db-data:
  product-db-data:
  order-db-data:
