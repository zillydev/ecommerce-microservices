package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"bytes"
	"context"
	"ecommerce-microservices/internal/gateway/graph"
	"ecommerce-microservices/internal/gateway/middlewares"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// PostNotification is the resolver for the postNotification field.
func (r *mutationResolver) PostNotification(ctx context.Context, input *graph.PostNotificationInput) (*graph.Notification, error) {
	userid := middlewares.ForJWTContext(ctx)
	if userid == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	body, err := json.Marshal(input)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal input: %v", err)
	}
	resp, err := http.Post(fmt.Sprintf("%s/post?userId=%s", r.NotificationServiceURL, userid), "application/json", bytes.NewBuffer(body))
	if err != nil {
		return nil, fmt.Errorf("failed to post notification: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusCreated {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("failed to post notification: %s", string(body))
	}

	var notification graph.Notification
	if err := json.NewDecoder(resp.Body).Decode(&notification); err != nil {
		return nil, fmt.Errorf("failed to decode response: %v", err)
	}

	return &notification, nil
}

// MarkNotificationRead is the resolver for the markNotificationRead field.
func (r *mutationResolver) MarkNotificationRead(ctx context.Context, notificationID int) (bool, error) {
	userid := middlewares.ForJWTContext(ctx)
	if userid == "" {
		return false, fmt.Errorf("unauthorized")
	}

	req, err := http.NewRequest(http.MethodPut, fmt.Sprintf("%s/mark-read?userId=%s", r.NotificationServiceURL, userid), bytes.NewBuffer([]byte(fmt.Sprintf("%d", notificationID))))
	if err != nil {
		return false, fmt.Errorf("failed to mark notification read: %v", err)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return false, fmt.Errorf("failed to mark notification read: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return false, fmt.Errorf("failed to mark notification read: %s", string(body))
	}

	return true, nil
}

// UnreadNotifications is the resolver for the unreadNotifications field.
func (r *queryResolver) UnreadNotifications(ctx context.Context) ([]*graph.Notification, error) {
	userid := middlewares.ForJWTContext(ctx)
	if userid == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	resp, err := http.Get(fmt.Sprintf("%s/unread?userId=%s", r.NotificationServiceURL, userid))
	if err != nil {
		return nil, fmt.Errorf("failed to get notifications: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("failed to get notifications: %s", string(body))
	}

	var notifications []*graph.Notification
	if err := json.NewDecoder(resp.Body).Decode(&notifications); err != nil {
		return nil, fmt.Errorf("failed to decode response: %v", err)
	}
	return notifications, nil
}
